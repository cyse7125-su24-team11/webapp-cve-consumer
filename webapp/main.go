package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/IBM/sarama"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type JSONData struct {
	CVEMetadata struct {
		CVEID             string `json:"cveId"`
		AssignerOrgId     string `json:"assignerOrgId"`
		AssignerShortName string `json:"assignerShortName"`
		DatePublished     string `json:"datePublished"`
		DateRejected      string `json:"dateRejected"`
		DateReserved      string `json:"dateReserved"`
		DateUpdated       string `json:"dateUpdated"`
		State             string `json:"state"`
	} `json:"cveMetadata"`
	DataType    string `json:"dataType"`
	DataVersion string `json:"dataVersion"`
}

type CVERecord struct {
	CVEID             string          `gorm:"column:cve_id;type:varchar(20);not null;unique"` // Ensure unique constraint is defined
	AssignerOrgId     string          `gorm:"column:assigner_org_id;type:varchar(100);not null"`
	AssignerShortName string          `gorm:"column:assigner_short_name;type:varchar(100);not null"`
	Description       string          `gorm:"column:description;type:text"`
	DatePublished     string          `gorm:"column:date_published;type:varchar(255)"`
	DateRejected      string          `gorm:"column:date_rejected;type:varchar(255)"`
	DateReserved      string          `gorm:"column:date_reserved;type:varchar(255)"`
	DateUpdated       string          `gorm:"column:date_updated;type:varchar(255)"`
	State             string          `gorm:"column:state;type:varchar(255)"`
	DataType          string          `gorm:"column:data_type;type:varchar(255)"`
	DataVersion       string          `gorm:"column:data_version;type:varchar(255)"`
	RawJSON           json.RawMessage `gorm:"column:raw_json;type:jsonb"`
}

func (CVERecord) TableName() string {
	return "cve.cve_records"
}

func main() {
	// Set up the Kafka consumer
	brokers := strings.Split(os.Getenv("KAFKA_BROKERS"), ",")
	topic := os.Getenv("KAFKA_TOPIC")

	config := sarama.NewConfig()
	config.Version = sarama.V2_5_0_0
	config.Consumer.Offsets.Initial = sarama.OffsetOldest // Start consuming from the oldest available message

	consumer, err := sarama.NewConsumer(brokers, config)
	if err != nil {
		log.Fatalf("Error creating Kafka consumer: %v", err)
	}
	defer consumer.Close()

	// Set up PostgreSQL connection
	dsn := os.Getenv("POSTGRES_DSN")
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("Error connecting to the database: %v", err)
	}

	// Kafka consumer handler
	handler := &ConsumerHandler{
		db: db,
	}

	ctx := context.Background()

	// Start consuming messages in a loop
	partitionConsumer, err := consumer.ConsumePartition(topic, 0, sarama.OffsetOldest)
	if err != nil {
		log.Fatalf("Error creating partition consumer: %v", err)
	}
	defer partitionConsumer.Close()

	for {
		select {
		case msg := <-partitionConsumer.Messages():
			log.Printf("Message claimed: value = %s, timestamp = %v, topic = %s", string(msg.Value), msg.Timestamp, msg.Topic)

			// Process the message
			err := processMessage(handler.db, msg.Value)
			if err != nil {
				log.Printf("Error processing message: %v", err)
			}

		case <-ctx.Done():
			log.Println("Consumer stopped")
			return
		}
	}
}

type ConsumerHandler struct {
	db *gorm.DB
}

func processMessage(db *gorm.DB, message []byte) error {
	var jsonDataStruct JSONData
	err := json.Unmarshal(message, &jsonDataStruct)
	if err != nil {
		log.Printf("Error unmarshalling JSON data: %v", err)
		log.Printf("Message content: %s", string(message))
		return fmt.Errorf("error unmarshalling JSON data: %v", err)
	}

	record := CVERecord{
		CVEID:             jsonDataStruct.CVEMetadata.CVEID,
		AssignerOrgId:     jsonDataStruct.CVEMetadata.AssignerOrgId,
		AssignerShortName: jsonDataStruct.CVEMetadata.AssignerShortName,
		DatePublished:     jsonDataStruct.CVEMetadata.DatePublished,
		DateRejected:      jsonDataStruct.CVEMetadata.DateRejected,
		DateReserved:      jsonDataStruct.CVEMetadata.DateReserved,
		DateUpdated:       jsonDataStruct.CVEMetadata.DateUpdated,
		State:             jsonDataStruct.CVEMetadata.State,
		DataType:          jsonDataStruct.DataType,
		DataVersion:       jsonDataStruct.DataVersion,
		RawJSON:           message,
	}

	if err := db.Clauses(clause.OnConflict{
		Columns:   []clause.Column{{Name: "cve_id"}}, // Specify the column for conflict resolution
		DoUpdates: clause.AssignmentColumns([]string{"date_updated"}), // Specify the columns to update
	}).Create(&record).Error; err != nil {
		return fmt.Errorf("error inserting data into DB: %v", err)
	}

	log.Println("Data inserted successfully")

	return nil
}
